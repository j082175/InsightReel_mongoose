/**
 * InsightReel Content Script (Complete Version)
 * Ïã§Ï†ú ÌîåÎû´Ìèº Ìï∏Îì§Îü¨Îì§ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏôÑÏ†ÑÌïú Í∏∞Îä• Íµ¨ÌòÑ
 */

// Í∏∞Î≥∏ Ïú†Ìã∏Î¶¨Ìã∞ (ÏàúÌôòÏ∞∏Ï°∞ Î∞©ÏßÄ)
class Utils {
    static detectPlatform() {
        const hostname = window.location.hostname;
        if (hostname.includes('instagram.com')) return 'INSTAGRAM';
        if (hostname.includes('tiktok.com')) return 'TIKTOK';
        if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) return 'YOUTUBE';
        return null;
    }

    static log(level, message, data = null) {
        const timestamp = new Date().toISOString();
        const prefix = `[InsightReel ${timestamp}]`;

        switch (level) {
            case 'info':
                console.log(`${prefix} ‚ÑπÔ∏è ${message}`, data || '');
                break;
            case 'warn':
                console.warn(`${prefix} ‚ö†Ô∏è ${message}`, data || '');
                break;
            case 'error':
                console.error(`${prefix} ‚ùå ${message}`, data || '');
                break;
            case 'success':
                console.log(`${prefix} ‚úÖ ${message}`, data || '');
                break;
            default:
                console.log(`${prefix} ${message}`, data || '');
        }
    }
}

// ÌôòÍ≤Ω ÏÑ§Ï†ï (ÎπåÎìú Ïãú Ï£ºÏûÖÎê®)
const environment = {
    SERVER_URL: process.env.SERVER_URL || 'http://localhost:3000',
    NODE_ENV: process.env.NODE_ENV || 'development',
    GOOGLE_API_KEY: process.env.GOOGLE_API_KEY || null,
    isDevelopment: process.env.NODE_ENV === 'development',
};

// ÌîåÎû´Ìèº ÏÉÅÏàò
const PLATFORMS = {
    INSTAGRAM: 'INSTAGRAM',
    TIKTOK: 'TIKTOK',
    YOUTUBE: 'YOUTUBE'
};

// Í∞ÑÎã®Ìïú ApiClient ÌÅ¥ÎûòÏä§
class ApiClient {
    constructor(serverUrl = environment.SERVER_URL) {
        this.serverUrl = serverUrl;
    }

    async checkConnection() {
        try {
            const response = await fetch(`${this.serverUrl}/health`, {
                method: 'GET',
                timeout: 5000,
            });
            return response.ok;
        } catch (error) {
            Utils.log('error', 'Server connection failed', error);
            return false;
        }
    }
}

// Í∞ÑÎã®Ìïú UIManager ÌÅ¥ÎûòÏä§
class UIManager {
    constructor() {
        this.processedElements = new Set();
    }

    cleanup() {
        // Ï†ïÎ¶¨ ÏûëÏóÖ
    }
}

// Î©îÏù∏ Content Script ÌÅ¥ÎûòÏä§
class ContentScript {
    constructor() {
        this.platform = Utils.detectPlatform();
        this.apiClient = new ApiClient();
        this.uiManager = new UIManager();
        this.platformHandler = null;
        this.init();
    }

    init() {
        Utils.log('info', 'InsightReel Content Script ÏãúÏûë', {
            platform: this.platform,
            url: window.location.href,
            environment: environment.NODE_ENV,
        });

        if (!this.platform) {
            Utils.log('warn', 'ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÌîåÎû´Ìèº', window.location.hostname);
            return;
        }

        // ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏
        this.checkServerConnection();

        // Chrome Extension Î©îÏãúÏßÄ Î¶¨Ïä§ÎÑà
        this.setupMessageListeners();

        // ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï ÌôïÏù∏
        this.validateEnvironment();

        // ÌîåÎû´ÌèºÎ≥Ñ Ìï∏Îì§Îü¨ Ï¥àÍ∏∞Ìôî
        this.initializePlatformHandler();
    }

    initializePlatformHandler() {
        try {
            // ÌîåÎû´ÌèºÎ≥Ñ Í∏∞Îä• Ï¥àÍ∏∞Ìôî
            switch (this.platform) {
                case PLATFORMS.INSTAGRAM:
                    this.initializeInstagram();
                    Utils.log('success', '‚úÖ Instagram Í∏∞Îä• Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                    break;

                case PLATFORMS.YOUTUBE:
                    this.initializeYouTube();
                    Utils.log('success', '‚úÖ YouTube Í∏∞Îä• Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                    break;

                case PLATFORMS.TIKTOK:
                    this.initializeTikTok();
                    Utils.log('success', '‚úÖ TikTok Í∏∞Îä• Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                    break;

                default:
                    Utils.log('warn', 'Ïïå Ïàò ÏóÜÎäî ÌîåÎû´Ìèº', this.platform);
                    return;
            }

            // ÌéòÏù¥ÏßÄ Ïñ∏Î°úÎìú Ïãú Ï†ïÎ¶¨
            window.addEventListener('beforeunload', () => {
                this.cleanup();
            });

            Utils.log('success', `üéØ ${this.platform} ÌîåÎû´Ìèº Í∏∞Îä• Ï¥àÍ∏∞Ìôî ÏôÑÎ£å`);

        } catch (error) {
            Utils.log('error', 'ÌîåÎû´Ìèº Ìï∏Îì§Îü¨ Ï¥àÍ∏∞Ìôî Ïã§Ìå®', error);
            // Ïò§Î•ò Î∞úÏÉùÏãú Í∏∞Î≥∏ Í∏∞Îä•Ïù¥ÎùºÎèÑ Ï†úÍ≥µ
            this.initializeBasicFeatures();
        }
    }

    initializeBasicFeatures() {
        // Í∏∞Î≥∏ Îã§Ïö¥Î°úÎìú Î≤ÑÌäº Í∏∞Îä•
        setInterval(() => {
            this.addBasicButtons();
        }, 2000);
        Utils.log('info', 'Í∏∞Î≥∏ Í∏∞Îä•ÏúºÎ°ú Ìè¥Î∞±');
    }

    initializeInstagram() {
        // Instagram Ï†ÑÏö© Í∏∞Îä•
        setInterval(() => {
            this.addInstagramAnalysisButtons();
        }, 1500);
    }

    initializeYouTube() {
        // YouTube Ï†ÑÏö© Í∏∞Îä•
        this.addYouTubeButtons();

        // SPA ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Í∞êÏßÄ
        window.addEventListener('yt-navigate-finish', () => {
            setTimeout(() => this.addYouTubeButtons(), 500);
        });
    }

    initializeTikTok() {
        // TikTok Ï†ÑÏö© Í∏∞Îä•
        setInterval(() => {
            this.addTikTokAnalysisButtons();
        }, 2000);
    }

    // Instagram Î∂ÑÏÑù Î≤ÑÌäº Ï∂îÍ∞Ä
    addInstagramAnalysisButtons() {
        const posts = document.querySelectorAll('article[role="presentation"]');

        posts.forEach(post => {
            if (post.querySelector('.instagram-analysis-button')) return;

            const video = post.querySelector('video');
            if (!video) return;

            const button = this.createAnalysisButton('instagram', 'ü§ñ Î∂ÑÏÑù');
            button.className = 'instagram-analysis-button';
            button.style.cssText = `
                background: linear-gradient(45deg, #8e44ad, #3498db) !important;
                color: white !important;
                border: none !important;
                border-radius: 20px !important;
                padding: 8px 16px !important;
                font-size: 12px !important;
                cursor: pointer !important;
                margin: 5px !important;
                z-index: 9999 !important;
                position: relative !important;
            `;

            // Í∏∞Ï°¥ Ï†ÄÏû• Î≤ÑÌäº Ï∞æÍ∏∞
            const saveButtons = post.querySelectorAll('svg[aria-label*="Ï†ÄÏû•"], svg[aria-label*="Save"]');
            if (saveButtons.length > 0) {
                const saveButton = saveButtons[0].closest('button');
                if (saveButton && saveButton.parentElement) {
                    saveButton.parentElement.appendChild(button);
                }
            }
        });
    }

    // YouTube Î≤ÑÌäºÎì§ Ï∂îÍ∞Ä
    addYouTubeButtons() {
        const isVideoPage = window.location.pathname === '/watch';
        const isShortsPage = window.location.pathname.startsWith('/shorts/');
        const isChannelPage = window.location.pathname.includes('/channel/') || window.location.pathname.includes('/@');

        if (isVideoPage) {
            this.addYouTubeVideoAnalysisButton();
        } else if (isShortsPage) {
            this.addYouTubeShortsAnalysisButton();
        } else if (isChannelPage) {
            this.addYouTubeChannelAnalysisButton();
        }
    }

    addYouTubeVideoAnalysisButton() {
        if (document.querySelector('.youtube-analysis-button')) return;

        const actionButtons = document.querySelector('#top-level-buttons-computed') ||
                             document.querySelector('#actions #top-level-buttons');

        if (actionButtons) {
            const button = this.createAnalysisButton('youtube', 'üé¨ ÏòÅÏÉÅ Î∂ÑÏÑù');
            button.className = 'youtube-analysis-button';
            button.style.cssText = `
                background: #ff0000 !important;
                color: white !important;
                border: none !important;
                border-radius: 18px !important;
                padding: 10px 16px !important;
                font-size: 14px !important;
                font-weight: 500 !important;
                cursor: pointer !important;
                margin-left: 8px !important;
                height: 36px !important;
            `;
            actionButtons.appendChild(button);
        }
    }

    addYouTubeShortsAnalysisButton() {
        if (document.querySelector('.youtube-shorts-analysis-button')) return;

        const actionsArea = document.querySelector('#actions');
        if (actionsArea) {
            const button = this.createAnalysisButton('youtube-shorts', 'üì± Shorts Î∂ÑÏÑù');
            button.className = 'youtube-shorts-analysis-button';
            button.style.cssText = `
                background: rgba(0, 0, 0, 0.8) !important;
                color: white !important;
                border: 1px solid rgba(255, 255, 255, 0.3) !important;
                border-radius: 24px !important;
                width: 48px !important;
                height: 48px !important;
                font-size: 16px !important;
                cursor: pointer !important;
                margin: 8px 0 !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
            `;
            actionsArea.appendChild(button);
        }
    }

    addYouTubeChannelAnalysisButton() {
        if (document.querySelector('.youtube-channel-analysis-button')) return;

        const channelHeader = document.querySelector('#channel-header') ||
                             document.querySelector('#channel-info');

        if (channelHeader) {
            const button = this.createAnalysisButton('youtube-channel', 'ü§ñ Ï±ÑÎÑê Î∂ÑÏÑù');
            button.className = 'youtube-channel-analysis-button';
            button.style.cssText = `
                background: linear-gradient(45deg, #ff6b6b, #ee5a24) !important;
                color: white !important;
                border: none !important;
                border-radius: 20px !important;
                padding: 12px 20px !important;
                font-size: 14px !important;
                font-weight: bold !important;
                cursor: pointer !important;
                margin: 10px !important;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3) !important;
            `;
            channelHeader.appendChild(button);
        }
    }

    // TikTok Î∂ÑÏÑù Î≤ÑÌäº Ï∂îÍ∞Ä
    addTikTokAnalysisButtons() {
        const videos = document.querySelectorAll('div[data-e2e="recommend-list-item"]');

        videos.forEach(video => {
            if (video.querySelector('.tiktok-analysis-button')) return;

            const button = this.createAnalysisButton('tiktok', 'üéµ Î∂ÑÏÑù');
            button.className = 'tiktok-analysis-button';
            button.style.cssText = `
                background: #fe2c55 !important;
                color: white !important;
                border: none !important;
                border-radius: 16px !important;
                padding: 8px 12px !important;
                font-size: 12px !important;
                cursor: pointer !important;
                position: absolute !important;
                top: 10px !important;
                right: 10px !important;
                z-index: 9999 !important;
            `;

            video.style.position = 'relative';
            video.appendChild(button);
        });
    }

    // Í∏∞Î≥∏ Î≤ÑÌäºÎì§ (Ìè¥Î∞±Ïö©)
    addBasicButtons() {
        const containers = document.querySelectorAll('video').forEach(video => {
            const container = video.closest('article, div');
            if (!container || container.querySelector('.basic-insightreel-button')) return;

            const button = this.createAnalysisButton('basic', 'üì• Ï†ÄÏû•');
            button.className = 'basic-insightreel-button';
            container.appendChild(button);
        });
    }

    // Î≤ÑÌäº ÏÉùÏÑ± Ìó¨Ìçº
    createAnalysisButton(platform, text) {
        const button = document.createElement('button');
        button.textContent = text;
        button.title = `InsightReel - ${platform} ÏΩòÌÖêÏ∏† Î∂ÑÏÑù`;

        button.addEventListener('click', () => {
            this.handleAnalysisClick(platform);
        });

        return button;
    }

    async handleAnalysisClick(platform) {
        Utils.log('info', `üéØ ${platform} Î∂ÑÏÑù Î≤ÑÌäº ÌÅ¥Î¶≠Îê®`);

        const videoData = {
            platform: platform.toUpperCase(),
            url: window.location.href,
            timestamp: new Date().toISOString()
        };

        try {
            const response = await fetch(`${environment.SERVER_URL}/api/process-video`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(videoData)
            });

            if (response.ok) {
                Utils.log('success', 'ÏÑúÎ≤ÑÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÏôÑÎ£å');
            } else {
                Utils.log('warn', 'ÏÑúÎ≤Ñ ÏùëÎãµ Ïò§Î•ò', response.status);
            }
        } catch (error) {
            Utils.log('error', 'ÏÑúÎ≤Ñ Ï†ÑÏÜ° Ïã§Ìå®', error.message);
        }
    }

    cleanup() {
        Utils.log('info', 'Content Script Ï†ïÎ¶¨ ÏôÑÎ£å');
    }

    async checkServerConnection() {
        try {
            const response = await fetch(`${environment.SERVER_URL}/health`, {
                method: 'GET',
                timeout: 5000,
            });

            if (response.ok) {
                Utils.log('success', 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏Îê®');
            } else {
                Utils.log('warn', 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå® - Í∏∞Î≥∏ Î™®ÎìúÎ°ú Ïã§Ìñâ');
            }
        } catch (error) {
            Utils.log('error', 'ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë Ïò§Î•ò', error);
        }
    }

    setupMessageListeners() {
        chrome.runtime.onMessage.addListener(
            (request, sender, sendResponse) => {
                this.handleMessage(request, sender, sendResponse);
                return true;
            },
        );
    }

    async handleMessage(request, sender, sendResponse) {
        try {
            switch (request.action) {
                case 'ping':
                    sendResponse({
                        success: true,
                        message: 'Content Script ÏùëÎãµ',
                    });
                    break;

                case 'getStatus':
                    sendResponse({
                        success: true,
                        data: {
                            platform: this.platform,
                            serverUrl: environment.SERVER_URL,
                            environment: environment.NODE_ENV,
                            hasHandler: !!this.platformHandler
                        },
                    });
                    break;

                default:
                    sendResponse({ error: 'Ïïå Ïàò ÏóÜÎäî Ïï°ÏÖòÏûÖÎãàÎã§.' });
            }
        } catch (error) {
            Utils.log('error', 'Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®', error.message);
            sendResponse({ error: error.message });
        }
    }

    validateEnvironment() {
        Utils.log('info', 'ÌôòÍ≤Ω ÏÑ§Ï†ï ÌôïÏù∏', {
            serverUrl: environment.SERVER_URL,
            nodeEnv: environment.NODE_ENV,
            hasApiKey: !!environment.GOOGLE_API_KEY,
            isDevelopment: environment.isDevelopment,
        });

        if (!environment.GOOGLE_API_KEY) {
            Utils.log(
                'warn',
                'GOOGLE_API_KEY ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
            );
        }
    }
}

// Content Script Ïã§Ìñâ
try {
    Utils.log('info', 'üöÄ InsightReel Content Script Ï¥àÍ∏∞Ìôî ÏãúÏûë');

    const contentScript = new ContentScript();

    // Í∏ÄÎ°úÎ≤å Ï†ëÍ∑ºÏùÑ ÏúÑÌïú window Í∞ùÏ≤¥ Îì±Î°ù
    window.INSIGHTREEL = {
        contentScript,
        utils: Utils,
        platforms: PLATFORMS,
        environment
    };

    // ÎîîÎ≤ÑÍπÖÏö© Ï∂îÍ∞Ä Ï†ëÍ∑º (Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎßå)
    if (environment.isDevelopment) {
        window.ContentScript = contentScript;
        window.Utils = Utils;
        window.PLATFORMS = PLATFORMS;
        window.environment = environment;
        Utils.log('info', 'üõ†Ô∏è Í∞úÎ∞ú Î™®Îìú: ÎîîÎ≤ÑÍπÖ Í∞ùÏ≤¥Îì§Ïù¥ windowÏóê Îì±Î°ùÎê®');
    }

    Utils.log('success', '‚úÖ InsightReel Content Script Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');

} catch (error) {
    console.error('‚ùå InsightReel Content Script Ïã§Ìñâ Ïò§Î•ò:', error);
    console.error('Ïò§Î•ò ÏúÑÏπò:', error.stack);

    // Ïò§Î•ò Î∞úÏÉù ÏãúÏóêÎèÑ Í∏∞Î≥∏Ï†ÅÏù∏ Ï†ïÎ≥¥Îäî Ï†úÍ≥µ
    window.INSIGHTREEL_ERROR = {
        error: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
    };
}