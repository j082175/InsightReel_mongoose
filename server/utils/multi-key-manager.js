const UsageTracker = require('./usage-tracker');
const { ServerLogger } = require('./logger');
const fs = require('fs');
const path = require('path');

// .env ÌååÏùº Î°úÎìú
require('dotenv').config();

/**
 * Ïó¨Îü¨ YouTube API ÌÇ§ Í¥ÄÎ¶¨Ïûê
 */
class MultiKeyManager {
  constructor() {
    this.keys = this.loadKeys();
    this.trackers = new Map();
    
    // ÏïàÏ†Ñ ÎßàÏßÑ ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥ÄÏàò ÎòêÎäî Í∏∞Î≥∏Í∞í)
    this.safetyMargin = parseInt(process.env.YOUTUBE_API_SAFETY_MARGIN) || 9500;
    
    this.initializeTrackers();
    
    ServerLogger.info(`üîë YouTube API ÌÇ§ ${this.keys.length}Í∞ú Î°úÎìúÎê® (ÏïàÏ†Ñ ÎßàÏßÑ: ${this.safetyMargin})`, null, 'MULTI-KEY');
  }
  
  /**
   * ÌÇ§ Î™©Î°ù Î°úÎìú (ÌôòÍ≤ΩÎ≥ÄÏàò + ÏÑ§Ï†ïÌååÏùº)
   */
  loadKeys() {
    const keys = [];
    
    // 1. Í∏∞Î≥∏ ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Î°úÎìú
    const safetyMargin = parseInt(process.env.YOUTUBE_API_SAFETY_MARGIN) || 9500;
    const envKeys = [
      { name: 'Î©îÏù∏ ÌÇ§', key: process.env.GOOGLE_API_KEY, quota: safetyMargin },
      { name: 'ÌÇ§ 1', key: process.env.YOUTUBE_KEY_1, quota: safetyMargin },
      { name: 'ÌÇ§ 2', key: process.env.YOUTUBE_KEY_2, quota: safetyMargin },
      { name: 'ÌÇ§ 3', key: process.env.YOUTUBE_KEY_3, quota: safetyMargin }
    ].filter(item => item.key); // Ïú†Ìö®Ìïú ÌÇ§Îßå ÌïÑÌÑ∞
    
    keys.push(...envKeys);
    
    // 2. ÏÑ§Ï†ï ÌååÏùºÏóêÏÑú Ï∂îÍ∞Ä Î°úÎìú (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    try {
      const configPath = path.join(__dirname, '../../config/youtube-keys.json');
      if (fs.existsSync(configPath)) {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        keys.push(...config.keys.filter(k => k.enabled));
      }
    } catch (error) {
      ServerLogger.warn('ÌÇ§ ÏÑ§Ï†ï ÌååÏùº Î°úÎìú Ïã§Ìå®', error.message, 'MULTI-KEY');
    }
    
    return keys;
  }
  
  /**
   * Í∞Å ÌÇ§Î≥Ñ UsageTracker Ï¥àÍ∏∞Ìôî
   */
  initializeTrackers() {
    this.keys.forEach((keyInfo, index) => {
      const tracker = new UsageTracker(keyInfo.key);
      this.trackers.set(keyInfo.key, {
        tracker,
        info: keyInfo,
        index
      });
    });
  }
  
  /**
   * ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÇ§ Ï∞æÍ∏∞ (ÏïàÏ†Ñ ÎßàÏßÑ Ï†ÅÏö©)
   */
  getAvailableKey() {
    for (const keyInfo of this.keys) {
      const keyData = this.trackers.get(keyInfo.key);
      const usage = keyData.tracker.getYouTubeUsage();
      
      // ÏïàÏ†Ñ ÎßàÏßÑ Ï≤¥ÌÅ¨ (API Ìò∏Ï∂ú Ï†Ñ ÏÇ¨Ï†Ñ Ï∞®Îã®)
      if (usage.total >= this.safetyMargin) {
        ServerLogger.warn(`‚ö†Ô∏è ÌÇ§ ${keyInfo.name} ÏïàÏ†Ñ ÎßàÏßÑ ÎèÑÎã¨: ${usage.total}/${this.safetyMargin}`, null, 'MULTI-KEY');
        continue; // Îã§Ïùå ÌÇ§ ÌôïÏù∏
      }
      
      // Í∏∞Ï°¥ quota exceeded Ï≤¥ÌÅ¨ÎèÑ Ïú†ÏßÄ (Ïù¥Ï§ë ÏïàÏ†ÑÏû•Ïπò)
      if (!keyData.tracker.isYouTubeQuotaExceeded()) {
        ServerLogger.info(`‚úÖ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÇ§: ${keyInfo.name} (ÏÇ¨Ïö©Îüâ: ${usage.total}/${this.safetyMargin})`, null, 'MULTI-KEY');
        return {
          key: keyInfo.key,
          tracker: keyData.tracker,
          name: keyInfo.name
        };
      }
    }
    
    throw new Error(`üö® Î™®Îì† YouTube API ÌÇ§Ïùò Ìï†ÎãπÎüâÏù¥ ÏÜåÏßÑÎêòÏóàÏäµÎãàÎã§ (${this.safetyMargin} ÏïàÏ†Ñ ÎßàÏßÑ Ï†ÅÏö©)`);
  }
  
  /**
   * API Ìò∏Ï∂ú ÌõÑ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å
   */
  trackAPI(apiKey, endpoint, success = true) {
    const keyData = this.trackers.get(apiKey);
    if (keyData) {
      keyData.tracker.trackAPI(endpoint, success);
    }
  }
  
  /**
   * Î™®Îì† ÌÇ§Ïùò ÏÇ¨Ïö©Îüâ ÌòÑÌô©
   */
  getAllUsageStatus() {
    const status = [];
    
    ServerLogger.info(`üîç [DEBUG] getAllUsageStatus Ìò∏Ï∂úÎê®, ÌÇ§ Í∞úÏàò: ${this.keys.length}`, null, 'MULTI-KEY');
    
    this.keys.forEach((keyInfo, index) => {
      const keyData = this.trackers.get(keyInfo.key);
      const usage = keyData.tracker.getYouTubeUsage();
      
      ServerLogger.info(`üîç [DEBUG] ÌÇ§ ${index}: ${keyInfo.name}, ÏÇ¨Ïö©Îüâ: ${usage.total}/${usage.quota}`, null, 'MULTI-KEY');
      
      status.push({
        name: keyInfo.name,
        usage: `${usage.total}/${usage.quota}`,
        percentage: Math.round((usage.total / usage.quota) * 100),
        remaining: usage.remaining,
        exceeded: keyData.tracker.isYouTubeQuotaExceeded()
      });
    });
    
    return status;
  }
  
  /**
   * ÏÇ¨Ïö©Îüâ ÌòÑÌô© Î°úÍ∑∏ (ÏïàÏ†Ñ ÎßàÏßÑ Í∏∞Ï§Ä)
   */
  logUsageStatus() {
    const status = this.getAllUsageStatus();
    
    ServerLogger.info(`üìä YouTube API ÌÇ§Î≥Ñ ÏÇ¨Ïö©Îüâ (${this.safetyMargin} ÏïàÏ†Ñ ÎßàÏßÑ):`, null, 'MULTI-KEY');
    status.forEach(s => {
      const safetyUsage = `${s.usage.split('/')[0]}/${this.safetyMargin}`;
      const safetyPercentage = Math.round((parseInt(s.usage.split('/')[0]) / this.safetyMargin) * 100);
      const icon = safetyPercentage >= 100 ? 'üö®' : safetyPercentage > 85 ? '‚ö†Ô∏è' : '‚úÖ';
      ServerLogger.info(`  ${icon} ${s.name}: ${safetyUsage} (${safetyPercentage}%)`, null, 'MULTI-KEY');
    });
  }
}

module.exports = MultiKeyManager;