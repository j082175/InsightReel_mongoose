const fs = require('fs');
const path = require('path');

class SimpleFieldMapperFixer {
    constructor() {
        // Í∞ÑÎã®ÌïòÍ≥† ÌôïÏã§Ìïú Îß§ÌïëÎßå
        this.fieldMap = {
            'channelName': 'CHANNEL_NAME',
            'subscribers': 'SUBSCRIBERS', 
            'views': 'VIEWS',
            'likes': 'LIKES',
            'videoTitle': 'VIDEO_TITLE',
            'contentType': 'CONTENT_TYPE',
            'platform': 'PLATFORM',
            'videoUrl': 'VIDEO_URL',
            'postUrl': 'POST_URL',
            'analysisType': 'ANALYSIS_TYPE',
            'useAI': 'USE_AI',
            'metadata': 'METADATA',
            'processing': 'PROCESSING',
            'analysis': 'ANALYSIS'
        };
        
        this.changes = [];
        this.backupCreated = false;
    }

    // Î∞±ÏóÖ ÏÉùÏÑ±
    createBackup(filePath) {
        const backupPath = filePath + '.backup-' + Date.now();
        fs.copyFileSync(filePath, backupPath);
        this.backupCreated = backupPath;
        console.log(`üíæ Î∞±ÏóÖ ÏÉùÏÑ±: ${path.basename(backupPath)}`);
        return backupPath;
    }

    // ÌååÏùº Ï≤òÎ¶¨
    async processFile(filePath, options = {}) {
        console.log(`üîß Ï≤òÎ¶¨ ÏãúÏûë: ${path.basename(filePath)}`);
        
        if (!fs.existsSync(filePath)) {
            throw new Error(`ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: ${filePath}`);
        }

        // Î∞±ÏóÖ ÏÉùÏÑ±
        if (!options.dryRun) {
            this.createBackup(filePath);
        }

        let content = fs.readFileSync(filePath, 'utf8');
        const originalContent = content;
        
        // FieldMapper import ÌôïÏù∏
        if (!this.hasFieldMapperImport(content)) {
            console.log('‚ö†Ô∏è  FieldMapper importÍ∞Ä ÏóÜÏäµÎãàÎã§. Ï∂îÍ∞Ä Í∂åÏû•.');
        }

        // Î≥ÄÌôò Ïã§Ìñâ
        content = this.fixDirectPropertyAccess(content);
        content = this.fixObjectLiteralFields(content);
        content = this.removeLegacyFallbacks(content);

        // Í≤∞Í≥º ÌôïÏù∏
        if (content === originalContent) {
            console.log('‚ú® Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§.');
            return { changed: false, changes: 0 };
        }

        // ÌååÏùº Ï†ÄÏû•
        if (!options.dryRun) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`‚úÖ ${this.changes.length}Í∞ú Î≥ÄÍ≤Ω Ï†ÅÏö©Îê®`);
        } else {
            console.log(`üîç DRY RUN: ${this.changes.length}Í∞ú Î≥ÄÍ≤Ω ÏòàÏ†ï`);
        }

        return {
            changed: true,
            changes: this.changes.length,
            details: this.changes
        };
    }

    // FieldMapper import ÌôïÏù∏
    hasFieldMapperImport(content) {
        return content.includes('FieldMapper') && 
               (content.includes("require('../types/field-mapper')") || 
                content.includes("require('./types/field-mapper')") ||
                content.includes('field-mapper'));
    }

    // 1. ÏßÅÏ†ë ÌîÑÎ°úÌçºÌã∞ Ï†ëÍ∑º ÏàòÏ†ï
    fixDirectPropertyAccess(content) {
        for (const [oldField, newField] of Object.entries(this.fieldMap)) {
            // obj.channelName Ìå®ÌÑ¥ Ï∞æÍ∏∞
            const regex = new RegExp(`(\\w+)\\.${oldField}\\b`, 'g');
            content = content.replace(regex, (match, objName) => {
                this.changes.push({
                    type: 'direct_access',
                    from: match,
                    to: `${objName}[FieldMapper.get('${newField}')]`
                });
                return `${objName}[FieldMapper.get('${newField}')]`;
            });
        }
        return content;
    }

    // 2. Í∞ùÏ≤¥ Î¶¨ÌÑ∞Îü¥ ÌïÑÎìú ÏàòÏ†ï
    fixObjectLiteralFields(content) {
        for (const [oldField, newField] of Object.entries(this.fieldMap)) {
            // "channelName:" Ìå®ÌÑ¥ Ï∞æÍ∏∞
            const regex = new RegExp(`(\\s+)${oldField}(\\s*:\\s*)`, 'g');
            content = content.replace(regex, (match, indent, colon) => {
                this.changes.push({
                    type: 'object_field',
                    from: `${oldField}:`,
                    to: `[FieldMapper.get('${newField}')]:`
                });
                return `${indent}[FieldMapper.get('${newField}')]${colon}`;
            });
        }
        return content;
    }

    // 3. Î†àÍ±∞Ïãú fallback Ï†úÍ±∞
    removeLegacyFallbacks(content) {
        for (const [oldField, newField] of Object.entries(this.fieldMap)) {
            // || obj.channelName Ìå®ÌÑ¥ Ï†úÍ±∞
            const regex = new RegExp(`\\s*\\|\\|\\s*\\w+\\.${oldField}\\b`, 'g');
            content = content.replace(regex, (match) => {
                this.changes.push({
                    type: 'remove_fallback',
                    from: match,
                    to: ''
                });
                return '';
            });
        }
        return content;
    }

    // Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌëúÏãú
    showChanges() {
        if (this.changes.length === 0) {
            console.log('Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§.');
            return;
        }

        console.log(`\nüìã Î≥ÄÍ≤Ω ÎÇ¥Ïó≠ (${this.changes.length}Í∞ú):`);
        const grouped = {};
        
        for (const change of this.changes) {
            if (!grouped[change.type]) {
                grouped[change.type] = [];
            }
            grouped[change.type].push(change);
        }

        for (const [type, changes] of Object.entries(grouped)) {
            const typeNames = {
                'direct_access': 'ÏßÅÏ†ë Ï†ëÍ∑º',
                'object_field': 'Í∞ùÏ≤¥ ÌïÑÎìú',
                'remove_fallback': 'Î†àÍ±∞Ïãú Ï†úÍ±∞'
            };
            
            console.log(`\n${typeNames[type]} (${changes.length}Í∞ú):`);
            changes.slice(0, 3).forEach(change => {
                console.log(`   ${change.from} ‚Üí ${change.to}`);
            });
            
            if (changes.length > 3) {
                console.log(`   ... Ïô∏ ${changes.length - 3}Í∞ú`);
            }
        }
    }

    // Î°§Î∞±
    rollback(filePath) {
        if (!this.backupCreated) {
            console.log('‚ùå ÏÉùÏÑ±Îêú Î∞±ÏóÖÏù¥ ÏóÜÏäµÎãàÎã§.');
            return false;
        }

        try {
            fs.copyFileSync(this.backupCreated, filePath);
            console.log(`üîÑ Î°§Î∞± ÏôÑÎ£å: ${path.basename(filePath)}`);
            return true;
        } catch (error) {
            console.error(`‚ùå Î°§Î∞± Ïã§Ìå®: ${error.message}`);
            return false;
        }
    }
}

// CLI Ïã§Ìñâ
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
ÏÇ¨Ïö©Î≤ï: node SimpleFieldMapperFixer.js [ÌååÏùºÍ≤ΩÎ°ú] [ÏòµÏÖò]

ÏòµÏÖò:
  --dry-run    Ïã§Ï†ú Î≥ÄÍ≤Ω ÏóÜÏù¥ ÎØ∏Î¶¨Î≥¥Í∏∞Îßå
  --help       ÎèÑÏõÄÎßê

ÏòàÏ†ú:
  node SimpleFieldMapperFixer.js ../../server/index.js
  node SimpleFieldMapperFixer.js ../../server/index.js --dry-run
`);
        process.exit(0);
    }

    const filePath = args[0];
    const isDryRun = args.includes('--dry-run');
    
    const fixer = new SimpleFieldMapperFixer();
    
    fixer.processFile(filePath, { dryRun: isDryRun })
        .then(result => {
            fixer.showChanges();
            
            if (result.changed && !isDryRun) {
                console.log(`\nüí° Î°§Î∞±ÌïòÎ†§Î©¥: fixer.rollback('${filePath}')`);
            }
        })
        .catch(error => {
            console.error(`‚ùå Ïò§Î•ò: ${error.message}`);
            process.exit(1);
        });
}

module.exports = SimpleFieldMapperFixer;