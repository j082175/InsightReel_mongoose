#!/usr/bin/env python3
"""
Instagram 쿠키 자동 추출 스크립트 (Playwright 사용)
"""

import json
import os
import sys
from datetime import datetime
from playwright.sync_api import sync_playwright
try:
    import pyotp
    TOTP_AVAILABLE = True
except ImportError:
    TOTP_AVAILABLE = False
    print("Warning: pyotp not installed. TOTP 2FA automation not available.")

def netscape_cookie_format(cookies):
    """쿠키를 Netscape 형식으로 변환"""
    lines = [
        "# Netscape HTTP Cookie File",
        "# Generated by Instagram Cookie Extractor",
        f"# Created: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    ]

    for cookie in cookies:
        if 'instagram.com' in cookie.get('domain', ''):
            # Netscape 형식: domain, domain_flag, path, secure, expiration, name, value
            domain = cookie.get('domain', '')
            domain_flag = 'TRUE' if domain.startswith('.') else 'FALSE'
            path = cookie.get('path', '/')
            secure = 'TRUE' if cookie.get('secure', False) else 'FALSE'
            expires = cookie.get('expires', -1)
            if expires == -1:
                expires = int(datetime.now().timestamp()) + (30 * 24 * 60 * 60)  # 30일 후
            else:
                expires = int(expires)
            name = cookie.get('name', '')
            value = cookie.get('value', '')

            line = f"{domain}\t{domain_flag}\t{path}\t{secure}\t{expires}\t{name}\t{value}"
            lines.append(line)

    return '\n'.join(lines)

def load_totp_config():
    """TOTP 설정 로드"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(script_dir, '../../data/instagram_totp_config.json')

    try:
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                secret = config.get('totp_secret', '').strip()
                if secret and secret != "":
                    return secret
    except Exception as e:
        print(f"Failed to load TOTP config: {e}")

    return None

def generate_totp_code(secret):
    """TOTP 코드 생성"""
    if not TOTP_AVAILABLE:
        return None

    try:
        totp = pyotp.TOTP(secret)
        code = totp.now()
        print(f"Generated TOTP code: {code}")
        return code
    except Exception as e:
        print(f"Failed to generate TOTP code: {e}")
        return None

def extract_instagram_cookies():
    """Instagram 쿠키 추출"""
    try:
        print("Starting Instagram cookie extraction with Playwright...")

        # TOTP 설정 로드
        totp_secret = load_totp_config()
        if totp_secret and TOTP_AVAILABLE:
            print("TOTP 2FA automation enabled!")
        else:
            print("TOTP 2FA automation not available (will require manual input)")

        with sync_playwright() as p:
            # 브라우저 실행 (headless=False로 로그인 과정 확인)
            browser = p.chromium.launch(
                headless=False,  # 로그인 확인을 위해 브라우저 표시
                slow_mo=1000     # 동작 속도 조절
            )

            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                viewport={'width': 1920, 'height': 1080},
                locale='ko-KR',
                timezone_id='Asia/Seoul',
                # 기기를 일관되게 식별하기 위한 설정
                extra_http_headers={
                    'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1'
                }
            )

            page = context.new_page()

            try:
                # 기존 쿠키 파일이 있는지 확인하고 로드
                script_dir = os.path.dirname(os.path.abspath(__file__))
                existing_cookies_path = os.path.join(script_dir, '../../data/instagram_cookies.txt')

                if os.path.exists(existing_cookies_path):
                    print("Found existing cookie file. Trying to reuse...")

                    # 기존 쿠키 로드 시도
                    try:
                        cookies_to_add = []
                        with open(existing_cookies_path, 'r', encoding='utf-8') as f:
                            for line in f:
                                if line.startswith('#') or not line.strip():
                                    continue

                                parts = line.strip().split('\t')
                                if len(parts) >= 7:
                                    cookies_to_add.append({
                                        'name': parts[5],
                                        'value': parts[6],
                                        'domain': parts[0],
                                        'path': parts[2],
                                        'secure': parts[3] == 'TRUE',
                                        'expires': int(parts[4]) if parts[4] != '-1' else -1
                                    })

                        # 쿠키 추가
                        if cookies_to_add:
                            context.add_cookies(cookies_to_add)
                            print(f"Loaded {len(cookies_to_add)} existing cookies")

                            # Instagram 홈으로 바로 이동해서 로그인 상태 확인
                            print("Checking if existing cookies are still valid...")
                            page.goto("https://www.instagram.com/", wait_until="networkidle")

                            # 로그인 상태 확인 (로그인되어 있으면 login 버튼이 없음)
                            page.wait_for_timeout(3000)
                            current_url = page.url

                            if 'login' not in current_url and 'instagram.com' in current_url:
                                print("Existing cookies are still valid! No login needed.")

                                # 쿠키 갱신 (새로운 쿠키로 업데이트)
                                print("Refreshing cookies...")
                                updated_cookies = context.cookies()
                                ig_cookies = [c for c in updated_cookies if 'instagram.com' in c.get('domain', '')]

                                if ig_cookies:
                                    netscape_content = netscape_cookie_format(ig_cookies)
                                    with open(existing_cookies_path, 'w', encoding='utf-8') as f:
                                        f.write(netscape_content)
                                    print("Cookies refreshed successfully!")
                                    return True
                            else:
                                print("Existing cookies expired. Need to login again.")
                    except Exception as e:
                        print(f"Failed to load existing cookies: {e}")

                # 기존 쿠키가 없거나 만료된 경우 로그인 진행
                print("Navigating to Instagram login page...")
                page.goto("https://www.instagram.com/accounts/login/", wait_until="networkidle")

                # 로그인 폼 대기
                page.wait_for_selector('input[name="username"]', timeout=10000)

                # 로그인 정보 입력
                print("Entering login credentials...")
                page.fill('input[name="username"]', 'j082175j082172@gmail.com')
                page.fill('input[name="password"]', '!@tkadnjsth3')

                # "이 기기를 기억하기" 옵션 체크 (있다면)
                try:
                    # 다양한 possible selectors for "Remember this device"
                    remember_selectors = [
                        'input[name="trustDevice"]',
                        'input[type="checkbox"]',
                        'label:has-text("기억")',
                        'label:has-text("Remember")',
                        'label:has-text("Trust")'
                    ]

                    for selector in remember_selectors:
                        if page.locator(selector).count() > 0:
                            page.check(selector)
                            print("Checked 'Remember this device' option")
                            break
                except:
                    pass  # 옵션이 없으면 무시

                # 로그인 버튼 클릭
                print("Clicking login button...")
                page.click('button[type="submit"]')

                # 로그인 결과 대기
                print("Waiting for login completion (max 30 seconds)...")
                try:
                    # 홈페이지로 리디렉션되길 기다림
                    page.wait_for_url("https://www.instagram.com/", timeout=30000)
                    print("Login successful!")
                except:
                    # 2FA나 추가 인증이 필요한 경우
                    current_url = page.url
                    print(f"Current URL: {current_url}")

                    if 'challenge' in current_url:
                        print("2FA Challenge detected!")

                        # TOTP 자동 처리 시도
                        if totp_secret and TOTP_AVAILABLE:
                            print("Attempting automatic TOTP 2FA...")

                            try:
                                # TOTP 코드 생성
                                totp_code = generate_totp_code(totp_secret)

                                if totp_code:
                                    # 인증 코드 입력 필드 찾기
                                    code_selectors = [
                                        'input[name="verificationCode"]',
                                        'input[placeholder*="code"]',
                                        'input[placeholder*="Code"]',
                                        'input[type="text"]',
                                        'input[inputmode="numeric"]'
                                    ]

                                    code_input_found = False
                                    for selector in code_selectors:
                                        if page.locator(selector).count() > 0:
                                            print(f"Found code input field: {selector}")
                                            page.fill(selector, totp_code)
                                            code_input_found = True
                                            break

                                    if code_input_found:
                                        # 제출 버튼 클릭
                                        submit_selectors = [
                                            'button[type="submit"]',
                                            'button:has-text("Confirm")',
                                            'button:has-text("확인")',
                                            'button:has-text("Continue")'
                                        ]

                                        for selector in submit_selectors:
                                            if page.locator(selector).count() > 0:
                                                page.click(selector)
                                                print("Clicked submit button for TOTP code")
                                                break

                                        print("TOTP code submitted automatically!")
                                    else:
                                        print("Could not find code input field. Please enter manually.")
                                        totp_secret = None  # 실패 시 수동 처리로 전환

                            except Exception as e:
                                print(f"TOTP automation failed: {e}")
                                totp_secret = None  # 실패 시 수동 처리로 전환

                        # TOTP 자동 처리가 실패했거나 설정되지 않은 경우 수동 처리
                        if not totp_secret or not TOTP_AVAILABLE:
                            print("Manual 2FA required:")
                            print("1. SMS code - Check your phone for SMS")
                            print("2. Authentication app - Use your TOTP app")
                            print("3. Backup codes - Use saved backup codes")
                            print("\nComplete authentication in the browser window.")
                            print("After completing 2FA, press Enter to continue...")
                            input()

                        # 2FA 완료 후 "기기 기억하기" 옵션 체크
                        try:
                            # 2FA 완료 후 나타날 수 있는 "기기 신뢰" 페이지 처리
                            page.wait_for_timeout(2000)  # 2초 대기

                            # "Don't ask again" 또는 "기기 기억하기" 옵션 찾아서 체크
                            trust_selectors = [
                                'input[name="dontAskAgain"]',
                                'input[value="trust"]',
                                'button:has-text("Trust")',
                                'button:has-text("기억")',
                                'label:has-text("Don\'t ask again")',
                                'label:has-text("기억")'
                            ]

                            for selector in trust_selectors:
                                if page.locator(selector).count() > 0:
                                    try:
                                        if 'button' in selector:
                                            page.click(selector)
                                        else:
                                            page.check(selector)
                                        print(f"Clicked trust device option: {selector}")
                                        page.wait_for_timeout(1000)
                                        break
                                    except:
                                        continue

                        except:
                            pass

                        # 2FA 완료 후 홈페이지 도달 확인
                        try:
                            page.wait_for_url("https://www.instagram.com/", timeout=60000)
                            print("2FA completed successfully!")
                        except:
                            print("2FA completion timeout. Please check if login succeeded.")

                    elif 'accounts/onetap' in current_url or 'login' in current_url:
                        print("Login verification required.")
                        print("Please complete verification in browser, then press Enter...")
                        input()
                    else:
                        print(f"Unexpected page: {current_url}")
                        print("Please handle manually in browser, then press Enter...")
                        input()

                # 최종 로그인 상태 확인
                final_url = page.url
                if 'instagram.com' in final_url and 'login' not in final_url:
                    print("Final login verification successful!")
                else:
                    print(f"Warning: May still be on login page: {final_url}")

                # 쿠키 추출
                print("Extracting cookies...")
                cookies = context.cookies()

                # Instagram 관련 쿠키만 필터링
                ig_cookies = [c for c in cookies if 'instagram.com' in c.get('domain', '')]

                if not ig_cookies:
                    print("No Instagram cookies found.")
                    return False

                print(f"Extracted {len(ig_cookies)} Instagram cookies")

                # 중요한 쿠키들 확인
                important_cookies = ['sessionid', 'csrftoken', 'mid', 'ig_did']
                found_cookies = []
                for cookie_name in important_cookies:
                    if any(c.get('name') == cookie_name for c in ig_cookies):
                        found_cookies.append(cookie_name)
                        print(f"Found {cookie_name}: YES")
                    else:
                        print(f"Found {cookie_name}: NO")

                if 'sessionid' not in found_cookies:
                    print("Warning: sessionid cookie missing. Login may have failed.")

                # 쿠키 파일 저장 경로
                script_dir = os.path.dirname(os.path.abspath(__file__))
                cookies_path = os.path.join(script_dir, '../../data/instagram_cookies.txt')

                # 디렉토리 생성
                os.makedirs(os.path.dirname(cookies_path), exist_ok=True)

                # Netscape 형식으로 저장
                netscape_content = netscape_cookie_format(ig_cookies)
                with open(cookies_path, 'w', encoding='utf-8') as f:
                    f.write(netscape_content)

                print(f"Cookie file saved: {cookies_path}")

                return True

            except Exception as e:
                print(f"Login or cookie extraction failed: {str(e)}")
                # 스크린샷 저장 (디버깅용)
                try:
                    screenshot_path = os.path.join(script_dir, '../../data/instagram_error.png')
                    page.screenshot(path=screenshot_path)
                    print(f"Error screenshot saved: {screenshot_path}")
                except:
                    pass
                return False

            finally:
                browser.close()

    except Exception as e:
        print(f"Playwright execution failed: {str(e)}")
        print("Please check if Playwright is installed: pip install playwright")
        return False

if __name__ == "__main__":
    print("Instagram Cookie Extractor")
    print("=" * 40)

    success = extract_instagram_cookies()

    if success:
        print("\nInstagram cookie extraction completed!")
        print("Now yt-dlp and Instaloader can use the cookie file.")
    else:
        print("\nCookie extraction failed!")
        print("You may need to manually extract cookies from browser.")

    sys.exit(0 if success else 1)