const mongoose = require('mongoose');
const dotenv = require('dotenv');
const path = require('path');

// .env ÌååÏùº Î°úÎìú
dotenv.config({ path: path.join(__dirname, '..', '.env') });

async function checkRequiredFields() {
    try {
        // MongoDB Ïó∞Í≤∞
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ MongoDB Ïó∞Í≤∞ ÏÑ±Í≥µ\n');

        const db = mongoose.connection.db;
        const collection = db.collection('channels');

        // ÌïÑÏàò ÌïÑÎìú Ï†ïÏùò (channel-types.jsÏóêÏÑú)
        const requiredFields = ['channelId', 'name', 'platform'];

        // Î™®Îì† Î¨∏ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
        const allDocs = await collection.find({}).toArray();
        console.log(`üìä Ï¥ù ${allDocs.length}Í∞ú Î¨∏ÏÑú Í≤ÄÏÇ¨\n`);

        // ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ Í≤ÄÏÇ¨
        let missingFieldsCount = 0;
        const missingDetails = {};

        allDocs.forEach((doc, index) => {
            const missing = [];

            requiredFields.forEach(field => {
                if (!doc[field] || doc[field] === '') {
                    missing.push(field);
                }
            });

            if (missing.length > 0) {
                missingFieldsCount++;
                console.log(`‚ùå Î¨∏ÏÑú ${index + 1} (ID: ${doc._id}):`);
                console.log(`   ÎàÑÎùΩÎêú ÌïÑÏàò ÌïÑÎìú: ${missing.join(', ')}`);
                console.log(`   Ï±ÑÎÑêÎ™Ö: ${doc.name || 'N/A'}`);
                console.log(`   Ï±ÑÎÑêID: ${doc.channelId || 'N/A'}`);
                console.log(`   ÌîåÎû´Ìèº: ${doc.platform || 'N/A'}\n`);
            }
        });

        // Í∞Å ÌïÑÎìúÎ≥Ñ Ï∂©Ï°±Î•† Í≥ÑÏÇ∞
        console.log('üìà === ÌïÑÏàò ÌïÑÎìú Ï∂©Ï°±Î•† ===');
        requiredFields.forEach(field => {
            const filledCount = allDocs.filter(doc => doc[field] && doc[field] !== '').length;
            const percentage = ((filledCount / allDocs.length) * 100).toFixed(1);
            console.log(`${field}: ${filledCount}/${allDocs.length} (${percentage}%)`);
        });

        // ÏÑ†ÌÉùÏ†Å ÌïÑÎìú Ï§ë Ï§ëÏöîÌïú Í≤ÉÎì§ ÌôïÏù∏
        console.log('\nüìã === Ï£ºÏöî ÏÑ†ÌÉùÏ†Å ÌïÑÎìú ÌòÑÌô© ===');
        const optionalFields = [
            'subscribers',
            'totalViews',
            'totalVideos',
            'keywords',
            'aiTags',
            'deepInsightTags',
            'categoryInfo',
            'contentType',      // ÎàÑÎùΩÎêú ÌïÑÎìú
            'last7DaysViews',   // ÎàÑÎùΩÎêú ÌïÑÎìú
            'viewsByPeriod'     // ÎàÑÎùΩÎêú ÌïÑÎìú
        ];

        optionalFields.forEach(field => {
            const existsCount = allDocs.filter(doc => {
                const value = doc[field];
                if (field === 'categoryInfo') {
                    return value && Object.keys(value).length > 0;
                }
                if (Array.isArray(value)) {
                    return value.length > 0;
                }
                return value !== undefined && value !== null && value !== '';
            }).length;

            const percentage = ((existsCount / allDocs.length) * 100).toFixed(1);
            const status = existsCount === 0 ? '‚ùå' : existsCount < allDocs.length ? '‚ö†Ô∏è' : '‚úÖ';
            console.log(`${status} ${field}: ${existsCount}/${allDocs.length} (${percentage}%)`);
        });

        // Í≤∞Í≥º ÏöîÏïΩ
        console.log('\nüìä === Í≤∞Í≥º ÏöîÏïΩ ===');
        if (missingFieldsCount === 0) {
            console.log('‚úÖ Î™®Îì† Î¨∏ÏÑúÍ∞Ä ÌïÑÏàò ÌïÑÎìúÎ•º Ï∂©Ï°±Ìï©ÎãàÎã§!');
        } else {
            console.log(`‚ö†Ô∏è ${missingFieldsCount}/${allDocs.length}Í∞ú Î¨∏ÏÑúÏóê ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ`);
        }

    } catch (error) {
        console.error('‚ùå ÏóêÎü¨ Î∞úÏÉù:', error.message);
    } finally {
        await mongoose.connection.close();
        console.log('\nüîå MongoDB Ïó∞Í≤∞ Ï¢ÖÎ£å');
    }
}

checkRequiredFields();